// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: sharedstreets.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from sharedstreets.proto</summary>
public static partial class SharedstreetsReflection {

  #region Descriptor
  /// <summary>File descriptor for sharedstreets.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static SharedstreetsReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChNzaGFyZWRzdHJlZXRzLnByb3RvIhsKCURlbGltaXRlchIOCgZsZW5ndGgY",
          "ASABKA0iQgoSR0lTU2VjdGlvbk1ldGFkYXRhEhEKCXNlY3Rpb25JZBgBIAEo",
          "CRIZChFzZWN0aW9uUHJvcGVydGllcxgCIAEoCSJECgtHSVNNZXRhZGF0YRIO",
          "CgZzb3VyY2UYASABKAkSJQoIc2VjdGlvbnMYAiADKAsyEy5HSVNTZWN0aW9u",
          "TWV0YWRhdGEiiwEKCldheVNlY3Rpb24SDQoFd2F5SWQYASABKAQSHQoJcm9h",
          "ZENsYXNzGAIgASgOMgouUm9hZENsYXNzEg4KBm9uZVdheRgDIAEoCBISCgpy",
          "b3VuZGFib3V0GAQgASgIEgwKBGxpbmsYBSABKAgSDwoHbm9kZUlkcxgGIAMo",
          "BBIMCgRuYW1lGAcgASgJIj0KC09TTU1ldGFkYXRhEiAKC3dheVNlY3Rpb25z",
          "GAEgAygLMgsuV2F5U2VjdGlvbhIMCgRuYW1lGAIgASgJInEKFVNoYXJlZFN0",
          "cmVldHNNZXRhZGF0YRISCgpnZW9tZXRyeUlkGAEgASgJEiEKC29zbU1ldGFk",
          "YXRhGAIgASgLMgwuT1NNTWV0YWRhdGESIQoLZ2lzTWV0YWRhdGEYAyADKAsy",
          "DC5HSVNNZXRhZGF0YSK+AQoVU2hhcmVkU3RyZWV0c0dlb21ldHJ5EgoKAmlk",
          "GAEgASgJEhoKEmZyb21JbnRlcnNlY3Rpb25JZBgCIAEoCRIYChB0b0ludGVy",
          "c2VjdGlvbklkGAMgASgJEhoKEmZvcndhcmRSZWZlcmVuY2VJZBgEIAEoCRIX",
          "Cg9iYWNrUmVmZXJlbmNlSWQYBSABKAkSHQoJcm9hZENsYXNzGAYgASgOMgou",
          "Um9hZENsYXNzEg8KB2xvbmxhdHMYByADKAEi6QEKEUxvY2F0aW9uUmVmZXJl",
          "bmNlEhYKDmludGVyc2VjdGlvbklkGAEgASgJEgsKA2xvbhgCIAEoARILCgNs",
          "YXQYAyABKAESGAoOaW5ib3VuZEJlYXJpbmcYBCABKAVIABIZCg9vdXRib3Vu",
          "ZEJlYXJpbmcYBSABKAVIARIbChFkaXN0YW5jZVRvTmV4dFJlZhgGIAEoBUgC",
          "QhgKFmluYm91bmRCZWFyaW5nX3ByZXNlbnRCGQoXb3V0Ym91bmRCZWFyaW5n",
          "X3ByZXNlbnRCGwoZZGlzdGFuY2VUb05leHRSZWZfcHJlc2VudCK1AgoWU2hh",
          "cmVkU3RyZWV0c1JlZmVyZW5jZRIKCgJpZBgBIAEoCRISCgpnZW9tZXRyeUlk",
          "GAIgASgJEjQKCWZvcm1PZldheRgDIAEoDjIhLlNoYXJlZFN0cmVldHNSZWZl",
          "cmVuY2UuRm9ybU9mV2F5Ei4KEmxvY2F0aW9uUmVmZXJlbmNlcxgEIAMoCzIS",
          "LkxvY2F0aW9uUmVmZXJlbmNlIpQBCglGb3JtT2ZXYXkSDQoJVW5kZWZpbmVk",
          "EAASDAoITW90b3J3YXkQARIXChNNdWx0aXBsZUNhcnJpYWdld2F5EAISFQoR",
          "U2luZ2xlQ2FycmlhZ2V3YXkQAxIOCgpSb3VuZGFib3V0EAQSEQoNVHJhZmZp",
          "Y1NxdWFyZRAFEgwKCFNsaXBSb2FkEAYSCQoFT3RoZXIQByKMAQoZU2hhcmVk",
          "U3RyZWV0c0ludGVyc2VjdGlvbhIKCgJpZBgBIAEoCRIOCgZub2RlSWQYAiAB",
          "KAQSCwoDbG9uGAMgASgBEgsKA2xhdBgEIAEoARIbChNpbmJvdW5kUmVmZXJl",
          "bmNlSWRzGAUgAygJEhwKFG91dGJvdW5kUmVmZXJlbmNlSWRzGAYgAygJKokB",
          "CglSb2FkQ2xhc3MSDAoITW90b3J3YXkQABIJCgVUcnVuaxABEgsKB1ByaW1h",
          "cnkQAhINCglTZWNvbmRhcnkQAxIMCghUZXJ0aWFyeRAEEg8KC1Jlc2lkZW50",
          "aWFsEAUSEAoMVW5jbGFzc2lmaWVkEAYSCwoHU2VydmljZRAHEgkKBU90aGVy",
          "EAhCFEISU2hhcmVkU3RyZWV0c1Byb3RvYgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::RoadClass), }, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::Delimiter), global::Delimiter.Parser, new[]{ "Length" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GISSectionMetadata), global::GISSectionMetadata.Parser, new[]{ "SectionId", "SectionProperties" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GISMetadata), global::GISMetadata.Parser, new[]{ "Source", "Sections" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::WaySection), global::WaySection.Parser, new[]{ "WayId", "RoadClass", "OneWay", "Roundabout", "Link", "NodeIds", "Name" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::OSMMetadata), global::OSMMetadata.Parser, new[]{ "WaySections", "Name" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SharedStreetsMetadata), global::SharedStreetsMetadata.Parser, new[]{ "GeometryId", "OsmMetadata", "GisMetadata" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SharedStreetsGeometry), global::SharedStreetsGeometry.Parser, new[]{ "Id", "FromIntersectionId", "ToIntersectionId", "ForwardReferenceId", "BackReferenceId", "RoadClass", "Lonlats" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LocationReference), global::LocationReference.Parser, new[]{ "IntersectionId", "Lon", "Lat", "InboundBearing", "OutboundBearing", "DistanceToNextRef" }, new[]{ "InboundBearingPresent", "OutboundBearingPresent", "DistanceToNextRefPresent" }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SharedStreetsReference), global::SharedStreetsReference.Parser, new[]{ "Id", "GeometryId", "FormOfWay", "LocationReferences" }, null, new[]{ typeof(global::SharedStreetsReference.Types.FormOfWay) }, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SharedStreetsIntersection), global::SharedStreetsIntersection.Parser, new[]{ "Id", "NodeId", "Lon", "Lat", "InboundReferenceIds", "OutboundReferenceIds" }, null, null, null)
        }));
  }
  #endregion

}
#region Enums
public enum RoadClass {
  [pbr::OriginalName("Motorway")] Motorway = 0,
  [pbr::OriginalName("Trunk")] Trunk = 1,
  [pbr::OriginalName("Primary")] Primary = 2,
  [pbr::OriginalName("Secondary")] Secondary = 3,
  [pbr::OriginalName("Tertiary")] Tertiary = 4,
  [pbr::OriginalName("Residential")] Residential = 5,
  [pbr::OriginalName("Unclassified")] Unclassified = 6,
  [pbr::OriginalName("Service")] Service = 7,
  [pbr::OriginalName("Other")] Other = 8,
}

#endregion

#region Messages
public sealed partial class Delimiter : pb::IMessage<Delimiter> {
  private static readonly pb::MessageParser<Delimiter> _parser = new pb::MessageParser<Delimiter>(() => new Delimiter());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Delimiter> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SharedstreetsReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Delimiter() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Delimiter(Delimiter other) : this() {
    length_ = other.length_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Delimiter Clone() {
    return new Delimiter(this);
  }

  /// <summary>Field number for the "length" field.</summary>
  public const int LengthFieldNumber = 1;
  private uint length_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Length {
    get { return length_; }
    set {
      length_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Delimiter);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Delimiter other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Length != other.Length) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Length != 0) hash ^= Length.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Length != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Length);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Length);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Delimiter other) {
    if (other == null) {
      return;
    }
    if (other.Length != 0) {
      Length = other.Length;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Length = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class GISSectionMetadata : pb::IMessage<GISSectionMetadata> {
  private static readonly pb::MessageParser<GISSectionMetadata> _parser = new pb::MessageParser<GISSectionMetadata>(() => new GISSectionMetadata());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GISSectionMetadata> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SharedstreetsReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GISSectionMetadata() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GISSectionMetadata(GISSectionMetadata other) : this() {
    sectionId_ = other.sectionId_;
    sectionProperties_ = other.sectionProperties_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GISSectionMetadata Clone() {
    return new GISSectionMetadata(this);
  }

  /// <summary>Field number for the "sectionId" field.</summary>
  public const int SectionIdFieldNumber = 1;
  private string sectionId_ = "";
  /// <summary>
  /// source specific id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SectionId {
    get { return sectionId_; }
    set {
      sectionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "sectionProperties" field.</summary>
  public const int SectionPropertiesFieldNumber = 2;
  private string sectionProperties_ = "";
  /// <summary>
  /// source specific encoding of properties
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SectionProperties {
    get { return sectionProperties_; }
    set {
      sectionProperties_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GISSectionMetadata);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GISSectionMetadata other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SectionId != other.SectionId) return false;
    if (SectionProperties != other.SectionProperties) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SectionId.Length != 0) hash ^= SectionId.GetHashCode();
    if (SectionProperties.Length != 0) hash ^= SectionProperties.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SectionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SectionId);
    }
    if (SectionProperties.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(SectionProperties);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SectionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SectionId);
    }
    if (SectionProperties.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SectionProperties);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GISSectionMetadata other) {
    if (other == null) {
      return;
    }
    if (other.SectionId.Length != 0) {
      SectionId = other.SectionId;
    }
    if (other.SectionProperties.Length != 0) {
      SectionProperties = other.SectionProperties;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SectionId = input.ReadString();
          break;
        }
        case 18: {
          SectionProperties = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class GISMetadata : pb::IMessage<GISMetadata> {
  private static readonly pb::MessageParser<GISMetadata> _parser = new pb::MessageParser<GISMetadata>(() => new GISMetadata());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GISMetadata> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SharedstreetsReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GISMetadata() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GISMetadata(GISMetadata other) : this() {
    source_ = other.source_;
    sections_ = other.sections_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GISMetadata Clone() {
    return new GISMetadata(this);
  }

  /// <summary>Field number for the "source" field.</summary>
  public const int SourceFieldNumber = 1;
  private string source_ = "";
  /// <summary>
  /// describes GIS source data (e.g. "gov.nyc:lion")
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Source {
    get { return source_; }
    set {
      source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "sections" field.</summary>
  public const int SectionsFieldNumber = 2;
  private static readonly pb::FieldCodec<global::GISSectionMetadata> _repeated_sections_codec
      = pb::FieldCodec.ForMessage(18, global::GISSectionMetadata.Parser);
  private readonly pbc::RepeatedField<global::GISSectionMetadata> sections_ = new pbc::RepeatedField<global::GISSectionMetadata>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::GISSectionMetadata> Sections {
    get { return sections_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GISMetadata);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GISMetadata other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Source != other.Source) return false;
    if(!sections_.Equals(other.sections_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Source.Length != 0) hash ^= Source.GetHashCode();
    hash ^= sections_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Source.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Source);
    }
    sections_.WriteTo(output, _repeated_sections_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Source.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
    }
    size += sections_.CalculateSize(_repeated_sections_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GISMetadata other) {
    if (other == null) {
      return;
    }
    if (other.Source.Length != 0) {
      Source = other.Source;
    }
    sections_.Add(other.sections_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Source = input.ReadString();
          break;
        }
        case 18: {
          sections_.AddEntriesFrom(input, _repeated_sections_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class WaySection : pb::IMessage<WaySection> {
  private static readonly pb::MessageParser<WaySection> _parser = new pb::MessageParser<WaySection>(() => new WaySection());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<WaySection> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SharedstreetsReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public WaySection() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public WaySection(WaySection other) : this() {
    wayId_ = other.wayId_;
    roadClass_ = other.roadClass_;
    oneWay_ = other.oneWay_;
    roundabout_ = other.roundabout_;
    link_ = other.link_;
    nodeIds_ = other.nodeIds_.Clone();
    name_ = other.name_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public WaySection Clone() {
    return new WaySection(this);
  }

  /// <summary>Field number for the "wayId" field.</summary>
  public const int WayIdFieldNumber = 1;
  private ulong wayId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong WayId {
    get { return wayId_; }
    set {
      wayId_ = value;
    }
  }

  /// <summary>Field number for the "roadClass" field.</summary>
  public const int RoadClassFieldNumber = 2;
  private global::RoadClass roadClass_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RoadClass RoadClass {
    get { return roadClass_; }
    set {
      roadClass_ = value;
    }
  }

  /// <summary>Field number for the "oneWay" field.</summary>
  public const int OneWayFieldNumber = 3;
  private bool oneWay_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool OneWay {
    get { return oneWay_; }
    set {
      oneWay_ = value;
    }
  }

  /// <summary>Field number for the "roundabout" field.</summary>
  public const int RoundaboutFieldNumber = 4;
  private bool roundabout_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Roundabout {
    get { return roundabout_; }
    set {
      roundabout_ = value;
    }
  }

  /// <summary>Field number for the "link" field.</summary>
  public const int LinkFieldNumber = 5;
  private bool link_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Link {
    get { return link_; }
    set {
      link_ = value;
    }
  }

  /// <summary>Field number for the "nodeIds" field.</summary>
  public const int NodeIdsFieldNumber = 6;
  private static readonly pb::FieldCodec<ulong> _repeated_nodeIds_codec
      = pb::FieldCodec.ForUInt64(50);
  private readonly pbc::RepeatedField<ulong> nodeIds_ = new pbc::RepeatedField<ulong>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<ulong> NodeIds {
    get { return nodeIds_; }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 7;
  private string name_ = "";
  /// <summary>
  /// name only stored here if different for each way section, otherwise captured in OSMMetadata
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as WaySection);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(WaySection other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (WayId != other.WayId) return false;
    if (RoadClass != other.RoadClass) return false;
    if (OneWay != other.OneWay) return false;
    if (Roundabout != other.Roundabout) return false;
    if (Link != other.Link) return false;
    if(!nodeIds_.Equals(other.nodeIds_)) return false;
    if (Name != other.Name) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (WayId != 0UL) hash ^= WayId.GetHashCode();
    if (RoadClass != 0) hash ^= RoadClass.GetHashCode();
    if (OneWay != false) hash ^= OneWay.GetHashCode();
    if (Roundabout != false) hash ^= Roundabout.GetHashCode();
    if (Link != false) hash ^= Link.GetHashCode();
    hash ^= nodeIds_.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (WayId != 0UL) {
      output.WriteRawTag(8);
      output.WriteUInt64(WayId);
    }
    if (RoadClass != 0) {
      output.WriteRawTag(16);
      output.WriteEnum((int) RoadClass);
    }
    if (OneWay != false) {
      output.WriteRawTag(24);
      output.WriteBool(OneWay);
    }
    if (Roundabout != false) {
      output.WriteRawTag(32);
      output.WriteBool(Roundabout);
    }
    if (Link != false) {
      output.WriteRawTag(40);
      output.WriteBool(Link);
    }
    nodeIds_.WriteTo(output, _repeated_nodeIds_codec);
    if (Name.Length != 0) {
      output.WriteRawTag(58);
      output.WriteString(Name);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (WayId != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WayId);
    }
    if (RoadClass != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RoadClass);
    }
    if (OneWay != false) {
      size += 1 + 1;
    }
    if (Roundabout != false) {
      size += 1 + 1;
    }
    if (Link != false) {
      size += 1 + 1;
    }
    size += nodeIds_.CalculateSize(_repeated_nodeIds_codec);
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(WaySection other) {
    if (other == null) {
      return;
    }
    if (other.WayId != 0UL) {
      WayId = other.WayId;
    }
    if (other.RoadClass != 0) {
      RoadClass = other.RoadClass;
    }
    if (other.OneWay != false) {
      OneWay = other.OneWay;
    }
    if (other.Roundabout != false) {
      Roundabout = other.Roundabout;
    }
    if (other.Link != false) {
      Link = other.Link;
    }
    nodeIds_.Add(other.nodeIds_);
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          WayId = input.ReadUInt64();
          break;
        }
        case 16: {
          roadClass_ = (global::RoadClass) input.ReadEnum();
          break;
        }
        case 24: {
          OneWay = input.ReadBool();
          break;
        }
        case 32: {
          Roundabout = input.ReadBool();
          break;
        }
        case 40: {
          Link = input.ReadBool();
          break;
        }
        case 50:
        case 48: {
          nodeIds_.AddEntriesFrom(input, _repeated_nodeIds_codec);
          break;
        }
        case 58: {
          Name = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class OSMMetadata : pb::IMessage<OSMMetadata> {
  private static readonly pb::MessageParser<OSMMetadata> _parser = new pb::MessageParser<OSMMetadata>(() => new OSMMetadata());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<OSMMetadata> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SharedstreetsReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OSMMetadata() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OSMMetadata(OSMMetadata other) : this() {
    waySections_ = other.waySections_.Clone();
    name_ = other.name_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OSMMetadata Clone() {
    return new OSMMetadata(this);
  }

  /// <summary>Field number for the "waySections" field.</summary>
  public const int WaySectionsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::WaySection> _repeated_waySections_codec
      = pb::FieldCodec.ForMessage(10, global::WaySection.Parser);
  private readonly pbc::RepeatedField<global::WaySection> waySections_ = new pbc::RepeatedField<global::WaySection>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::WaySection> WaySections {
    get { return waySections_; }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private string name_ = "";
  /// <summary>
  /// name stored here if same for all way sections
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as OSMMetadata);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(OSMMetadata other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!waySections_.Equals(other.waySections_)) return false;
    if (Name != other.Name) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= waySections_.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    waySections_.WriteTo(output, _repeated_waySections_codec);
    if (Name.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += waySections_.CalculateSize(_repeated_waySections_codec);
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(OSMMetadata other) {
    if (other == null) {
      return;
    }
    waySections_.Add(other.waySections_);
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          waySections_.AddEntriesFrom(input, _repeated_waySections_codec);
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class SharedStreetsMetadata : pb::IMessage<SharedStreetsMetadata> {
  private static readonly pb::MessageParser<SharedStreetsMetadata> _parser = new pb::MessageParser<SharedStreetsMetadata>(() => new SharedStreetsMetadata());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SharedStreetsMetadata> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SharedstreetsReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SharedStreetsMetadata() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SharedStreetsMetadata(SharedStreetsMetadata other) : this() {
    geometryId_ = other.geometryId_;
    osmMetadata_ = other.osmMetadata_ != null ? other.osmMetadata_.Clone() : null;
    gisMetadata_ = other.gisMetadata_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SharedStreetsMetadata Clone() {
    return new SharedStreetsMetadata(this);
  }

  /// <summary>Field number for the "geometryId" field.</summary>
  public const int GeometryIdFieldNumber = 1;
  private string geometryId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string GeometryId {
    get { return geometryId_; }
    set {
      geometryId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "osmMetadata" field.</summary>
  public const int OsmMetadataFieldNumber = 2;
  private global::OSMMetadata osmMetadata_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::OSMMetadata OsmMetadata {
    get { return osmMetadata_; }
    set {
      osmMetadata_ = value;
    }
  }

  /// <summary>Field number for the "gisMetadata" field.</summary>
  public const int GisMetadataFieldNumber = 3;
  private static readonly pb::FieldCodec<global::GISMetadata> _repeated_gisMetadata_codec
      = pb::FieldCodec.ForMessage(26, global::GISMetadata.Parser);
  private readonly pbc::RepeatedField<global::GISMetadata> gisMetadata_ = new pbc::RepeatedField<global::GISMetadata>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::GISMetadata> GisMetadata {
    get { return gisMetadata_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SharedStreetsMetadata);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SharedStreetsMetadata other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (GeometryId != other.GeometryId) return false;
    if (!object.Equals(OsmMetadata, other.OsmMetadata)) return false;
    if(!gisMetadata_.Equals(other.gisMetadata_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (GeometryId.Length != 0) hash ^= GeometryId.GetHashCode();
    if (osmMetadata_ != null) hash ^= OsmMetadata.GetHashCode();
    hash ^= gisMetadata_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (GeometryId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(GeometryId);
    }
    if (osmMetadata_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(OsmMetadata);
    }
    gisMetadata_.WriteTo(output, _repeated_gisMetadata_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (GeometryId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(GeometryId);
    }
    if (osmMetadata_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(OsmMetadata);
    }
    size += gisMetadata_.CalculateSize(_repeated_gisMetadata_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SharedStreetsMetadata other) {
    if (other == null) {
      return;
    }
    if (other.GeometryId.Length != 0) {
      GeometryId = other.GeometryId;
    }
    if (other.osmMetadata_ != null) {
      if (osmMetadata_ == null) {
        osmMetadata_ = new global::OSMMetadata();
      }
      OsmMetadata.MergeFrom(other.OsmMetadata);
    }
    gisMetadata_.Add(other.gisMetadata_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          // _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          GeometryId = input.ReadString();
          break;
        }
        case 18: {
          if (osmMetadata_ == null) {
            osmMetadata_ = new global::OSMMetadata();
          }
          input.ReadMessage(osmMetadata_);
          break;
        }
        case 26: {
          gisMetadata_.AddEntriesFrom(input, _repeated_gisMetadata_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class SharedStreetsGeometry : pb::IMessage<SharedStreetsGeometry> {
  private static readonly pb::MessageParser<SharedStreetsGeometry> _parser = new pb::MessageParser<SharedStreetsGeometry>(() => new SharedStreetsGeometry());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SharedStreetsGeometry> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SharedstreetsReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SharedStreetsGeometry() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SharedStreetsGeometry(SharedStreetsGeometry other) : this() {
    id_ = other.id_;
    fromIntersectionId_ = other.fromIntersectionId_;
    toIntersectionId_ = other.toIntersectionId_;
    forwardReferenceId_ = other.forwardReferenceId_;
    backReferenceId_ = other.backReferenceId_;
    roadClass_ = other.roadClass_;
    lonlats_ = other.lonlats_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SharedStreetsGeometry Clone() {
    return new SharedStreetsGeometry(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "fromIntersectionId" field.</summary>
  public const int FromIntersectionIdFieldNumber = 2;
  private string fromIntersectionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string FromIntersectionId {
    get { return fromIntersectionId_; }
    set {
      fromIntersectionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "toIntersectionId" field.</summary>
  public const int ToIntersectionIdFieldNumber = 3;
  private string toIntersectionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ToIntersectionId {
    get { return toIntersectionId_; }
    set {
      toIntersectionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "forwardReferenceId" field.</summary>
  public const int ForwardReferenceIdFieldNumber = 4;
  private string forwardReferenceId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ForwardReferenceId {
    get { return forwardReferenceId_; }
    set {
      forwardReferenceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "backReferenceId" field.</summary>
  public const int BackReferenceIdFieldNumber = 5;
  private string backReferenceId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string BackReferenceId {
    get { return backReferenceId_; }
    set {
      backReferenceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "roadClass" field.</summary>
  public const int RoadClassFieldNumber = 6;
  private global::RoadClass roadClass_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RoadClass RoadClass {
    get { return roadClass_; }
    set {
      roadClass_ = value;
    }
  }

  /// <summary>Field number for the "lonlats" field.</summary>
  public const int LonlatsFieldNumber = 7;
  private static readonly pb::FieldCodec<double> _repeated_lonlats_codec
      = pb::FieldCodec.ForDouble(58);
  private readonly pbc::RepeatedField<double> lonlats_ = new pbc::RepeatedField<double>();
  /// <summary>
  /// interleaved lon/lat pairs in sequence
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<double> Lonlats {
    get { return lonlats_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SharedStreetsGeometry);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SharedStreetsGeometry other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (FromIntersectionId != other.FromIntersectionId) return false;
    if (ToIntersectionId != other.ToIntersectionId) return false;
    if (ForwardReferenceId != other.ForwardReferenceId) return false;
    if (BackReferenceId != other.BackReferenceId) return false;
    if (RoadClass != other.RoadClass) return false;
    if(!lonlats_.Equals(other.lonlats_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (FromIntersectionId.Length != 0) hash ^= FromIntersectionId.GetHashCode();
    if (ToIntersectionId.Length != 0) hash ^= ToIntersectionId.GetHashCode();
    if (ForwardReferenceId.Length != 0) hash ^= ForwardReferenceId.GetHashCode();
    if (BackReferenceId.Length != 0) hash ^= BackReferenceId.GetHashCode();
    if (RoadClass != 0) hash ^= RoadClass.GetHashCode();
    hash ^= lonlats_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (FromIntersectionId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(FromIntersectionId);
    }
    if (ToIntersectionId.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(ToIntersectionId);
    }
    if (ForwardReferenceId.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(ForwardReferenceId);
    }
    if (BackReferenceId.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(BackReferenceId);
    }
    if (RoadClass != 0) {
      output.WriteRawTag(48);
      output.WriteEnum((int) RoadClass);
    }
    lonlats_.WriteTo(output, _repeated_lonlats_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (FromIntersectionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(FromIntersectionId);
    }
    if (ToIntersectionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ToIntersectionId);
    }
    if (ForwardReferenceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ForwardReferenceId);
    }
    if (BackReferenceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(BackReferenceId);
    }
    if (RoadClass != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RoadClass);
    }
    size += lonlats_.CalculateSize(_repeated_lonlats_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SharedStreetsGeometry other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.FromIntersectionId.Length != 0) {
      FromIntersectionId = other.FromIntersectionId;
    }
    if (other.ToIntersectionId.Length != 0) {
      ToIntersectionId = other.ToIntersectionId;
    }
    if (other.ForwardReferenceId.Length != 0) {
      ForwardReferenceId = other.ForwardReferenceId;
    }
    if (other.BackReferenceId.Length != 0) {
      BackReferenceId = other.BackReferenceId;
    }
    if (other.RoadClass != 0) {
      RoadClass = other.RoadClass;
    }
    lonlats_.Add(other.lonlats_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
                    // had to comment this out otherwise the parsing was not working
                    // _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          FromIntersectionId = input.ReadString();
          break;
        }
        case 26: {
          ToIntersectionId = input.ReadString();
          break;
        }
        case 34: {
          ForwardReferenceId = input.ReadString();
          break;
        }
        case 42: {
          BackReferenceId = input.ReadString();
          break;
        }
        case 48: {
          roadClass_ = (global::RoadClass) input.ReadEnum();
          break;
        }
        case 58:
        case 57: {
          lonlats_.AddEntriesFrom(input, _repeated_lonlats_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class LocationReference : pb::IMessage<LocationReference> {
  private static readonly pb::MessageParser<LocationReference> _parser = new pb::MessageParser<LocationReference>(() => new LocationReference());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LocationReference> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SharedstreetsReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LocationReference() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LocationReference(LocationReference other) : this() {
    intersectionId_ = other.intersectionId_;
    lon_ = other.lon_;
    lat_ = other.lat_;
    switch (other.InboundBearingPresentCase) {
      case InboundBearingPresentOneofCase.InboundBearing:
        InboundBearing = other.InboundBearing;
        break;
    }

    switch (other.OutboundBearingPresentCase) {
      case OutboundBearingPresentOneofCase.OutboundBearing:
        OutboundBearing = other.OutboundBearing;
        break;
    }

    switch (other.DistanceToNextRefPresentCase) {
      case DistanceToNextRefPresentOneofCase.DistanceToNextRef:
        DistanceToNextRef = other.DistanceToNextRef;
        break;
    }

    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LocationReference Clone() {
    return new LocationReference(this);
  }

  /// <summary>Field number for the "intersectionId" field.</summary>
  public const int IntersectionIdFieldNumber = 1;
  private string intersectionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string IntersectionId {
    get { return intersectionId_; }
    set {
      intersectionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "lon" field.</summary>
  public const int LonFieldNumber = 2;
  private double lon_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Lon {
    get { return lon_; }
    set {
      lon_ = value;
    }
  }

  /// <summary>Field number for the "lat" field.</summary>
  public const int LatFieldNumber = 3;
  private double lat_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Lat {
    get { return lat_; }
    set {
      lat_ = value;
    }
  }

  /// <summary>Field number for the "inboundBearing" field.</summary>
  public const int InboundBearingFieldNumber = 4;
  /// <summary>
  /// rounded to nearest degree 0-360 -- optional field, using proto3 oneof to allow for nulls
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int InboundBearing {
    get { return inboundBearingPresentCase_ == InboundBearingPresentOneofCase.InboundBearing ? (int) inboundBearingPresent_ : 0; }
    set {
      inboundBearingPresent_ = value;
      inboundBearingPresentCase_ = InboundBearingPresentOneofCase.InboundBearing;
    }
  }

  /// <summary>Field number for the "outboundBearing" field.</summary>
  public const int OutboundBearingFieldNumber = 5;
  /// <summary>
  /// rounded to nearest degree 0-360 -- optional field, using proto3 oneof to allow for nulls
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OutboundBearing {
    get { return outboundBearingPresentCase_ == OutboundBearingPresentOneofCase.OutboundBearing ? (int) outboundBearingPresent_ : 0; }
    set {
      outboundBearingPresent_ = value;
      outboundBearingPresentCase_ = OutboundBearingPresentOneofCase.OutboundBearing;
    }
  }

  /// <summary>Field number for the "distanceToNextRef" field.</summary>
  public const int DistanceToNextRefFieldNumber = 6;
  /// <summary>
  /// in centimeters -- max value of 15km -- optional field, using proto3 oneof to allow for nulls
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DistanceToNextRef {
    get { return distanceToNextRefPresentCase_ == DistanceToNextRefPresentOneofCase.DistanceToNextRef ? (int) distanceToNextRefPresent_ : 0; }
    set {
      distanceToNextRefPresent_ = value;
      distanceToNextRefPresentCase_ = DistanceToNextRefPresentOneofCase.DistanceToNextRef;
    }
  }

  private object inboundBearingPresent_;
  /// <summary>Enum of possible cases for the "inboundBearing_present" oneof.</summary>
  public enum InboundBearingPresentOneofCase {
    None = 0,
    InboundBearing = 4,
  }
  private InboundBearingPresentOneofCase inboundBearingPresentCase_ = InboundBearingPresentOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public InboundBearingPresentOneofCase InboundBearingPresentCase {
    get { return inboundBearingPresentCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearInboundBearingPresent() {
    inboundBearingPresentCase_ = InboundBearingPresentOneofCase.None;
    inboundBearingPresent_ = null;
  }

  private object outboundBearingPresent_;
  /// <summary>Enum of possible cases for the "outboundBearing_present" oneof.</summary>
  public enum OutboundBearingPresentOneofCase {
    None = 0,
    OutboundBearing = 5,
  }
  private OutboundBearingPresentOneofCase outboundBearingPresentCase_ = OutboundBearingPresentOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OutboundBearingPresentOneofCase OutboundBearingPresentCase {
    get { return outboundBearingPresentCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearOutboundBearingPresent() {
    outboundBearingPresentCase_ = OutboundBearingPresentOneofCase.None;
    outboundBearingPresent_ = null;
  }

  private object distanceToNextRefPresent_;
  /// <summary>Enum of possible cases for the "distanceToNextRef_present" oneof.</summary>
  public enum DistanceToNextRefPresentOneofCase {
    None = 0,
    DistanceToNextRef = 6,
  }
  private DistanceToNextRefPresentOneofCase distanceToNextRefPresentCase_ = DistanceToNextRefPresentOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DistanceToNextRefPresentOneofCase DistanceToNextRefPresentCase {
    get { return distanceToNextRefPresentCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDistanceToNextRefPresent() {
    distanceToNextRefPresentCase_ = DistanceToNextRefPresentOneofCase.None;
    distanceToNextRefPresent_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LocationReference);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LocationReference other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (IntersectionId != other.IntersectionId) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Lon, other.Lon)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Lat, other.Lat)) return false;
    if (InboundBearing != other.InboundBearing) return false;
    if (OutboundBearing != other.OutboundBearing) return false;
    if (DistanceToNextRef != other.DistanceToNextRef) return false;
    if (InboundBearingPresentCase != other.InboundBearingPresentCase) return false;
    if (OutboundBearingPresentCase != other.OutboundBearingPresentCase) return false;
    if (DistanceToNextRefPresentCase != other.DistanceToNextRefPresentCase) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (IntersectionId.Length != 0) hash ^= IntersectionId.GetHashCode();
    if (Lon != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Lon);
    if (Lat != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Lat);
    if (inboundBearingPresentCase_ == InboundBearingPresentOneofCase.InboundBearing) hash ^= InboundBearing.GetHashCode();
    if (outboundBearingPresentCase_ == OutboundBearingPresentOneofCase.OutboundBearing) hash ^= OutboundBearing.GetHashCode();
    if (distanceToNextRefPresentCase_ == DistanceToNextRefPresentOneofCase.DistanceToNextRef) hash ^= DistanceToNextRef.GetHashCode();
    hash ^= (int) inboundBearingPresentCase_;
    hash ^= (int) outboundBearingPresentCase_;
    hash ^= (int) distanceToNextRefPresentCase_;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (IntersectionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(IntersectionId);
    }
    if (Lon != 0D) {
      output.WriteRawTag(17);
      output.WriteDouble(Lon);
    }
    if (Lat != 0D) {
      output.WriteRawTag(25);
      output.WriteDouble(Lat);
    }
    if (inboundBearingPresentCase_ == InboundBearingPresentOneofCase.InboundBearing) {
      output.WriteRawTag(32);
      output.WriteInt32(InboundBearing);
    }
    if (outboundBearingPresentCase_ == OutboundBearingPresentOneofCase.OutboundBearing) {
      output.WriteRawTag(40);
      output.WriteInt32(OutboundBearing);
    }
    if (distanceToNextRefPresentCase_ == DistanceToNextRefPresentOneofCase.DistanceToNextRef) {
      output.WriteRawTag(48);
      output.WriteInt32(DistanceToNextRef);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (IntersectionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(IntersectionId);
    }
    if (Lon != 0D) {
      size += 1 + 8;
    }
    if (Lat != 0D) {
      size += 1 + 8;
    }
    if (inboundBearingPresentCase_ == InboundBearingPresentOneofCase.InboundBearing) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(InboundBearing);
    }
    if (outboundBearingPresentCase_ == OutboundBearingPresentOneofCase.OutboundBearing) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OutboundBearing);
    }
    if (distanceToNextRefPresentCase_ == DistanceToNextRefPresentOneofCase.DistanceToNextRef) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DistanceToNextRef);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LocationReference other) {
    if (other == null) {
      return;
    }
    if (other.IntersectionId.Length != 0) {
      IntersectionId = other.IntersectionId;
    }
    if (other.Lon != 0D) {
      Lon = other.Lon;
    }
    if (other.Lat != 0D) {
      Lat = other.Lat;
    }
    switch (other.InboundBearingPresentCase) {
      case InboundBearingPresentOneofCase.InboundBearing:
        InboundBearing = other.InboundBearing;
        break;
    }

    switch (other.OutboundBearingPresentCase) {
      case OutboundBearingPresentOneofCase.OutboundBearing:
        OutboundBearing = other.OutboundBearing;
        break;
    }

    switch (other.DistanceToNextRefPresentCase) {
      case DistanceToNextRefPresentOneofCase.DistanceToNextRef:
        DistanceToNextRef = other.DistanceToNextRef;
        break;
    }

    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          IntersectionId = input.ReadString();
          break;
        }
        case 17: {
          Lon = input.ReadDouble();
          break;
        }
        case 25: {
          Lat = input.ReadDouble();
          break;
        }
        case 32: {
          InboundBearing = input.ReadInt32();
          break;
        }
        case 40: {
          OutboundBearing = input.ReadInt32();
          break;
        }
        case 48: {
          DistanceToNextRef = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class SharedStreetsReference : pb::IMessage<SharedStreetsReference> {
  private static readonly pb::MessageParser<SharedStreetsReference> _parser = new pb::MessageParser<SharedStreetsReference>(() => new SharedStreetsReference());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SharedStreetsReference> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SharedstreetsReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SharedStreetsReference() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SharedStreetsReference(SharedStreetsReference other) : this() {
    id_ = other.id_;
    geometryId_ = other.geometryId_;
    formOfWay_ = other.formOfWay_;
    locationReferences_ = other.locationReferences_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SharedStreetsReference Clone() {
    return new SharedStreetsReference(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "geometryId" field.</summary>
  public const int GeometryIdFieldNumber = 2;
  private string geometryId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string GeometryId {
    get { return geometryId_; }
    set {
      geometryId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "formOfWay" field.</summary>
  public const int FormOfWayFieldNumber = 3;
  private global::SharedStreetsReference.Types.FormOfWay formOfWay_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SharedStreetsReference.Types.FormOfWay FormOfWay {
    get { return formOfWay_; }
    set {
      formOfWay_ = value;
    }
  }

  /// <summary>Field number for the "locationReferences" field.</summary>
  public const int LocationReferencesFieldNumber = 4;
  private static readonly pb::FieldCodec<global::LocationReference> _repeated_locationReferences_codec
      = pb::FieldCodec.ForMessage(34, global::LocationReference.Parser);
  private readonly pbc::RepeatedField<global::LocationReference> locationReferences_ = new pbc::RepeatedField<global::LocationReference>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::LocationReference> LocationReferences {
    get { return locationReferences_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SharedStreetsReference);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SharedStreetsReference other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (GeometryId != other.GeometryId) return false;
    if (FormOfWay != other.FormOfWay) return false;
    if(!locationReferences_.Equals(other.locationReferences_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (GeometryId.Length != 0) hash ^= GeometryId.GetHashCode();
    if (FormOfWay != 0) hash ^= FormOfWay.GetHashCode();
    hash ^= locationReferences_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (GeometryId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(GeometryId);
    }
    if (FormOfWay != 0) {
      output.WriteRawTag(24);
      output.WriteEnum((int) FormOfWay);
    }
    locationReferences_.WriteTo(output, _repeated_locationReferences_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (GeometryId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(GeometryId);
    }
    if (FormOfWay != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FormOfWay);
    }
    size += locationReferences_.CalculateSize(_repeated_locationReferences_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SharedStreetsReference other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.GeometryId.Length != 0) {
      GeometryId = other.GeometryId;
    }
    if (other.FormOfWay != 0) {
      FormOfWay = other.FormOfWay;
    }
    locationReferences_.Add(other.locationReferences_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          //_unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          GeometryId = input.ReadString();
          break;
        }
        case 24: {
          formOfWay_ = (global::SharedStreetsReference.Types.FormOfWay) input.ReadEnum();
          break;
        }
        case 34: {
          locationReferences_.AddEntriesFrom(input, _repeated_locationReferences_codec);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the SharedStreetsReference message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum FormOfWay {
      [pbr::OriginalName("Undefined")] Undefined = 0,
      [pbr::OriginalName("Motorway")] Motorway = 1,
      [pbr::OriginalName("MultipleCarriageway")] MultipleCarriageway = 2,
      [pbr::OriginalName("SingleCarriageway")] SingleCarriageway = 3,
      [pbr::OriginalName("Roundabout")] Roundabout = 4,
      /// <summary>
      /// yikes: https://giphy.com/gifs/square-addis-meskel-GYb9s3Afw0cWA
      /// </summary>
      [pbr::OriginalName("TrafficSquare")] TrafficSquare = 5,
      [pbr::OriginalName("SlipRoad")] SlipRoad = 6,
      [pbr::OriginalName("Other")] Other = 7,
    }

  }
  #endregion

}

public sealed partial class SharedStreetsIntersection : pb::IMessage<SharedStreetsIntersection> {
  private static readonly pb::MessageParser<SharedStreetsIntersection> _parser = new pb::MessageParser<SharedStreetsIntersection>(() => new SharedStreetsIntersection());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SharedStreetsIntersection> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SharedstreetsReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SharedStreetsIntersection() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SharedStreetsIntersection(SharedStreetsIntersection other) : this() {
    id_ = other.id_;
    nodeId_ = other.nodeId_;
    lon_ = other.lon_;
    lat_ = other.lat_;
    inboundReferenceIds_ = other.inboundReferenceIds_.Clone();
    outboundReferenceIds_ = other.outboundReferenceIds_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SharedStreetsIntersection Clone() {
    return new SharedStreetsIntersection(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "nodeId" field.</summary>
  public const int NodeIdFieldNumber = 2;
  private ulong nodeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong NodeId {
    get { return nodeId_; }
    set {
      nodeId_ = value;
    }
  }

  /// <summary>Field number for the "lon" field.</summary>
  public const int LonFieldNumber = 3;
  private double lon_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Lon {
    get { return lon_; }
    set {
      lon_ = value;
    }
  }

  /// <summary>Field number for the "lat" field.</summary>
  public const int LatFieldNumber = 4;
  private double lat_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Lat {
    get { return lat_; }
    set {
      lat_ = value;
    }
  }

  /// <summary>Field number for the "inboundReferenceIds" field.</summary>
  public const int InboundReferenceIdsFieldNumber = 5;
  private static readonly pb::FieldCodec<string> _repeated_inboundReferenceIds_codec
      = pb::FieldCodec.ForString(42);
  private readonly pbc::RepeatedField<string> inboundReferenceIds_ = new pbc::RepeatedField<string>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> InboundReferenceIds {
    get { return inboundReferenceIds_; }
  }

  /// <summary>Field number for the "outboundReferenceIds" field.</summary>
  public const int OutboundReferenceIdsFieldNumber = 6;
  private static readonly pb::FieldCodec<string> _repeated_outboundReferenceIds_codec
      = pb::FieldCodec.ForString(50);
  private readonly pbc::RepeatedField<string> outboundReferenceIds_ = new pbc::RepeatedField<string>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> OutboundReferenceIds {
    get { return outboundReferenceIds_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SharedStreetsIntersection);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SharedStreetsIntersection other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (NodeId != other.NodeId) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Lon, other.Lon)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Lat, other.Lat)) return false;
    if(!inboundReferenceIds_.Equals(other.inboundReferenceIds_)) return false;
    if(!outboundReferenceIds_.Equals(other.outboundReferenceIds_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (NodeId != 0UL) hash ^= NodeId.GetHashCode();
    if (Lon != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Lon);
    if (Lat != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Lat);
    hash ^= inboundReferenceIds_.GetHashCode();
    hash ^= outboundReferenceIds_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (NodeId != 0UL) {
      output.WriteRawTag(16);
      output.WriteUInt64(NodeId);
    }
    if (Lon != 0D) {
      output.WriteRawTag(25);
      output.WriteDouble(Lon);
    }
    if (Lat != 0D) {
      output.WriteRawTag(33);
      output.WriteDouble(Lat);
    }
    inboundReferenceIds_.WriteTo(output, _repeated_inboundReferenceIds_codec);
    outboundReferenceIds_.WriteTo(output, _repeated_outboundReferenceIds_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (NodeId != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NodeId);
    }
    if (Lon != 0D) {
      size += 1 + 8;
    }
    if (Lat != 0D) {
      size += 1 + 8;
    }
    size += inboundReferenceIds_.CalculateSize(_repeated_inboundReferenceIds_codec);
    size += outboundReferenceIds_.CalculateSize(_repeated_outboundReferenceIds_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SharedStreetsIntersection other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.NodeId != 0UL) {
      NodeId = other.NodeId;
    }
    if (other.Lon != 0D) {
      Lon = other.Lon;
    }
    if (other.Lat != 0D) {
      Lat = other.Lat;
    }
    inboundReferenceIds_.Add(other.inboundReferenceIds_);
    outboundReferenceIds_.Add(other.outboundReferenceIds_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          // _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 16: {
          NodeId = input.ReadUInt64();
          break;
        }
        case 25: {
          Lon = input.ReadDouble();
          break;
        }
        case 33: {
          Lat = input.ReadDouble();
          break;
        }
        case 42: {
          inboundReferenceIds_.AddEntriesFrom(input, _repeated_inboundReferenceIds_codec);
          break;
        }
        case 50: {
          outboundReferenceIds_.AddEntriesFrom(input, _repeated_outboundReferenceIds_codec);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
